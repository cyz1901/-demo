// pages/CardLink/CardLink.js
Page({


  /**
   * 页面的初始数据
   */
  data: {
htmlSnip:`<div class="div_class">
    <h1>介绍</h1>
    <br>
    <p class="p">
    在这张卡片中，我们将介绍另一种数据结构 —— 链表。
    <br><br>
    与数组相似，链表也是一种线性数据结构。这里有一个例子：
    <br><br>
    正如你所看到的，链表中的每个元素实际上是一个单独的对象，而所有对象都通过每个元素中的引用字段链接在一起。
    <br><br>
    链表有两种类型：单链表和双链表。上面给出的例子是一个单链表，这里有一个双链表的例子：
    <br><br>
    我们将在接下来的章节中介绍更多内容。完成这张卡片后，你将：
    <br><br>
    1.了解单链表和双链表的结构；<br>
    2.在单链表或双链表中实现遍历、插入和删除；<br>
    3.分析在单链表或双链表中的各种操作的复杂度；<br>
    4.在链表中使用双指针技巧（快指针慢指针技巧）；<br>
    5.解决一些经典问题，例如反转链表；<br>
    6.分析你设计的算法的复杂度；<br>
    7.积累设计和调试的经验。<br>
    </p>
  </div>
  `,
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})